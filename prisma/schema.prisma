// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Authentification
  emailVerified               Boolean   @default(false)
  emailVerificationToken      String?
  emailVerificationSentAt     DateTime?
  lastLoginAt                 DateTime?
  
  // Beta access
  betaAccessGranted           Boolean   @default(false)
  betaAccessGrantedAt         DateTime?
  betaAccessHasQuit           Boolean   @default(false)
  
  // Subscription
  subscriptionPlan            String    @default("free") // free, pro, business
  subscriptionStatus          String    @default("trial") // trial, active, canceled, expired
  subscriptionStartDate       DateTime  @default(now())
  subscriptionTrialEndsAt     DateTime?
  subscriptionEndsAt          DateTime?
  
  // Usage tracking
  auditsThisMonth             Int       @default(0)
  auditsTotal                 Int       @default(0)
  teamMembers                 Int       @default(1)
  storageUsed                 Int       @default(0) // en MB
  
  // Settings
  defaultLanguage             String    @default("fr")
  emailNotifications          Boolean   @default(true)
  weeklyReports               Boolean   @default(false)
  theme                       String    @default("system")
  timezone                    String    @default("Europe/Paris")
  
  // Relations
  audits                      Audit[]
  
  @@map("users")
}

model Audit {
  id          String   @id @default(cuid())
  userId      String
  url         String
  title       String?
  engine      String   // axe, rgaa, wave, comparative
  status      String   @default("completed") // pending, running, completed, failed
  createdAt   DateTime @default(now())
  completedAt DateTime?
  
  // Results
  violations     Json?    // Stockage des violations trouvées
  summary        Json?    // Résumé de l'audit
  reportData     Json?    // Données complètes du rapport
  
  // Metadata
  pageInfo       Json?    // Informations sur la page auditée
  analysisTime   Int?     // Temps d'analyse en ms
  errorMessage   String?  // Message d'erreur si échec
  
  // Relations
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("audits")
}

model AuditHistory {
  id        String   @id @default(cuid())
  userId    String
  action    String   // audit_created, audit_deleted, etc.
  metadata  Json?
  createdAt DateTime @default(now())
  
  @@map("audit_history")
}

model Usage {
  id              String   @id @default(cuid())
  userId          String
  year            Int
  month           Int
  auditsCount     Int      @default(0)
  storageUsed     Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@unique([userId, year, month])
  @@map("usage")
}
