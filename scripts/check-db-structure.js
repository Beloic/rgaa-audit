#!/usr/bin/env node

/**
 * Script pour v√©rifier la structure de la base de donn√©es
 */

const PRODUCTION_URL = 'https://rgaa-audit.vercel.app';

async function checkDatabaseStructure() {
  console.log('üîç V√©rification structure base de donn√©es\n');

  try {
    // Test avec un update qui contient TOUS les champs pour voir lesquels sont rejet√©s
    console.log('1. üß™ Test avec tous les champs possibles...');
    
    const testEmail = 'lauregagnonn@gmail.com';
    
    const fullUpdateData = {
      email: testEmail,
      updates: {
        name: 'Structure Test',
        // Champs usage - ceux qui nous int√©ressent
        usage: {
          auditsToday: 88,
          auditsTotal: 88,
          auditsThisMonth: 88,
          lastAuditDate: new Date().toISOString(),
          teamMembers: 2,
          storageUsed: 100
        },
        // Champs settings
        settings: {
          defaultLanguage: 'en',
          emailNotifications: false,
          theme: 'dark'
        }
      }
    };

    const response = await fetch(`${PRODUCTION_URL}/api/user/update`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(fullUpdateData)
    });

    console.log(`   Statut: ${response.status}`);
    
    if (response.ok) {
      const result = await response.json();
      console.log('‚úÖ Update accept√©');
      
      // V√©rifier ce qui a √©t√© vraiment sauv√©
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      const checkResponse = await fetch(`${PRODUCTION_URL}/api/user/refresh`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email: testEmail })
      });

      if (checkResponse.ok) {
        const userData = await checkResponse.json();
        console.log('\nüìä Valeurs en base apr√®s update:');
        console.log(`   Nom: ${userData.name}`);
        console.log(`   audits_today: ${userData.usage?.auditsToday || 'undefined'}`);
        console.log(`   audits_total: ${userData.usage?.auditsTotal || 'undefined'}`);
        console.log(`   audits_this_month: ${userData.usage?.auditsThisMonth || 'undefined'}`);
        console.log(`   theme: ${userData.settings?.theme || 'undefined'}`);
        
        // Analyser quels champs ont √©t√© sauv√©s
        console.log('\nüîç ANALYSE:');
        
        if (userData.name === 'Structure Test') {
          console.log('‚úÖ Champ name sauv√© correctement');
        } else {
          console.log('‚ùå Champ name pas sauv√©');
        }
        
        if (userData.usage?.auditsToday === 88) {
          console.log('‚úÖ audits_today fonctionne !');
        } else {
          console.log('‚ùå audits_today ne fonctionne pas');
        }
        
        if (userData.usage?.auditsTotal === 88) {
          console.log('‚úÖ audits_total fonctionne !');
        } else {
          console.log('‚ùå audits_total ne fonctionne pas');
        }
        
        if (userData.usage?.auditsThisMonth === 88) {
          console.log('‚úÖ audits_this_month fonctionne !');
        } else {
          console.log('‚ùå audits_this_month ne fonctionne pas');
        }
        
        if (userData.settings?.theme === 'dark') {
          console.log('‚úÖ Champ theme sauv√©');
        } else {
          console.log('‚ùå Champ theme pas sauv√©');
        }
      }
      
    } else {
      console.log('‚ùå Update rejet√©');
      const errorText = await response.text();
      console.log(`   Erreur: ${errorText}`);
    }

    // Test 2: Update direct des colonnes avec les noms Supabase
    console.log('\n2. üîß Test direct avec noms de colonnes Supabase...');
    
    const directUpdateData = {
      email: testEmail,
      updates: {
        audits_today: 77,      // Nom direct de la colonne
        audits_total: 77,      // Nom direct de la colonne
        audits_this_month: 77  // Nom direct de la colonne
      }
    };

    const directResponse = await fetch(`${PRODUCTION_URL}/api/user/update`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(directUpdateData)
    });

    console.log(`   Statut direct: ${directResponse.status}`);
    
    if (directResponse.ok) {
      console.log('‚úÖ Update direct accept√©');
      
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      const checkDirectResponse = await fetch(`${PRODUCTION_URL}/api/user/refresh`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email: testEmail })
      });

      if (checkDirectResponse.ok) {
        const directUserData = await checkDirectResponse.json();
        console.log('\nüìä Valeurs apr√®s update direct:');
        console.log(`   audits_today: ${directUserData.usage?.auditsToday || 'undefined'}`);
        console.log(`   audits_total: ${directUserData.usage?.auditsTotal || 'undefined'}`);
        console.log(`   audits_this_month: ${directUserData.usage?.auditsThisMonth || 'undefined'}`);
        
        if (directUserData.usage?.auditsToday === 77) {
          console.log('‚úÖ Update direct fonctionne !');
        } else {
          console.log('‚ùå M√™me l\'update direct ne fonctionne pas');
        }
      }
    } else {
      const directErrorText = await directResponse.text();
      console.log(`‚ùå Update direct rejet√©: ${directErrorText}`);
    }

  } catch (error) {
    console.error('üí• Erreur:', error.message);
  }
}

checkDatabaseStructure(); 