const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase
const supabaseUrl = 'https://ntzppsdyidqonusibocc.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im50enBwc2R5aWRxb251c2lib2NjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTExMDc3NjEsImV4cCI6MjA2NjY4Mzc2MX0.XybM_Rjat5A3EZGHHP_oUNtePrB_krvysqCtuOJtcws';

const supabase = createClient(supabaseUrl, supabaseKey);

async function testEmailSending() {
  console.log('üìß Test d\'envoi d\'email de v√©rification...\n');

  try {
    // 1. R√©cup√©rer le dernier utilisateur cr√©√©
    console.log('1Ô∏è‚É£ R√©cup√©ration du dernier utilisateur...');
    const { data: latestUser, error: userError } = await supabase
      .from('users')
      .select('email, name, email_verification_token')
      .order('created_at', { ascending: false })
      .limit(1)
      .single();

    if (userError || !latestUser) {
      console.log('‚ùå Erreur lors de la r√©cup√©ration de l\'utilisateur:', userError?.message);
      return;
    }

    console.log('‚úÖ Utilisateur trouv√©:');
    console.log(`   - Email: ${latestUser.email}`);
    console.log(`   - Nom: ${latestUser.name}`);
    console.log(`   - Token: ${latestUser.email_verification_token ? '‚úÖ Pr√©sent' : '‚ùå Manquant'}`);

    if (!latestUser.email_verification_token) {
      console.log('\nüí° Aucun token de v√©rification trouv√©. G√©n√©ration d\'un nouveau token...');
      
      // G√©n√©rer un nouveau token
      const newToken = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
      
      const { error: updateError } = await supabase
        .from('users')
        .update({ 
          email_verification_token: newToken,
          email_verification_sent_at: new Date().toISOString()
        })
        .eq('email', latestUser.email);

      if (updateError) {
        console.log('‚ùå Erreur lors de la mise √† jour du token:', updateError.message);
        return;
      }

      console.log('‚úÖ Nouveau token g√©n√©r√© et sauvegard√©');
      latestUser.email_verification_token = newToken;
    }

    // 2. Tester l'envoi d'email
    console.log('\n2Ô∏è‚É£ Test d\'envoi d\'email...');
    
    const testEmailData = {
      email: latestUser.email,
      token: latestUser.email_verification_token
    };

    console.log('üì§ Envoi de la requ√™te √† /api/auth/send-verification...');
    
    // Simuler l'envoi d'email (puisque nous sommes dans un script Node.js)
    const verificationUrl = `https://rgaa-audit.vercel.app/auth/verify-email?token=${latestUser.email_verification_token}`;
    
    console.log('\nüìß === EMAIL DE V√âRIFICATION ===');
    console.log(`√Ä: ${latestUser.email}`);
    console.log(`Sujet: Confirmez votre adresse email - RGAA Audit`);
    console.log('');
    console.log(`Bonjour ${latestUser.name},`);
    console.log('');
    console.log('Merci de vous √™tre inscrit sur RGAA Audit !');
    console.log('');
    console.log('Pour activer votre compte, veuillez cliquer sur le lien suivant :');
    console.log(verificationUrl);
    console.log('');
    console.log('Ce lien expirera dans 24 heures.');
    console.log('');
    console.log('Si vous n\'avez pas cr√©√© ce compte, ignorez cet email.');
    console.log('');
    console.log('Cordialement,');
    console.log('L\'√©quipe RGAA Audit');
    console.log('===============================');

    // 3. V√©rifier la configuration MailJet
    console.log('\n3Ô∏è‚É£ V√©rification de la configuration MailJet...');
    
    const mailjetApiKey = process.env.MAILJET_API_KEY;
    const mailjetSecretKey = process.env.MAILJET_SECRET_KEY;
    
    if (mailjetApiKey && mailjetApiKey !== 'your_mailjet_api_key' && 
        mailjetSecretKey && mailjetSecretKey !== 'your_mailjet_secret_key') {
      console.log('‚úÖ Cl√©s MailJet configur√©es');
      console.log('üí° En production, l\'email sera envoy√© via MailJet');
    } else {
      console.log('‚ö†Ô∏è Cl√©s MailJet non configur√©es ou invalides');
      console.log('üí° En d√©veloppement, l\'email est affich√© en mode simulation');
      console.log('');
      console.log('üìã Pour configurer MailJet en production :');
      console.log('   1. Cr√©ez un compte sur https://www.mailjet.com/');
      console.log('   2. R√©cup√©rez vos cl√©s API');
      console.log('   3. Configurez les variables d\'environnement :');
      console.log('      MAILJET_API_KEY=votre_cl√©_api');
      console.log('      MAILJET_SECRET_KEY=votre_cl√©_secr√®te');
      console.log('      MAILJET_FROM_EMAIL=votre_email@domaine.com');
    }

    console.log('\n‚úÖ Test termin√© !');
    console.log(`üîó Lien de v√©rification: ${verificationUrl}`);

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error.message);
  }
}

testEmailSending(); 