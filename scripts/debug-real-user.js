#!/usr/bin/env node

/**
 * Script de diagnostic pour un utilisateur r√©el
 * Utilisez ce script avec l'email d'un compte que vous venez de cr√©er et v√©rifier
 */

const PRODUCTION_URL = 'https://rgaa-audit.vercel.app';

async function debugRealUser() {
  console.log('üîç Diagnostic utilisateur r√©el\n');

  // Demander l'email √† l'utilisateur
  const args = process.argv.slice(2);
  if (args.length === 0) {
    console.log('‚ùå Usage: node scripts/debug-real-user.js <email-utilisateur>');
    console.log('   Exemple: node scripts/debug-real-user.js test@example.com');
    return;
  }

  const userEmail = args[0];
  console.log(`üìß Email √† diagnostiquer: ${userEmail}\n`);

  try {
    // 1. R√©cup√©rer les donn√©es utilisateur depuis la base
    console.log('1. üìä R√©cup√©ration des donn√©es utilisateur...');
    
    const refreshResponse = await fetch(`${PRODUCTION_URL}/api/user/refresh`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email: userEmail })
    });

    if (!refreshResponse.ok) {
      console.log('‚ùå Impossible de r√©cup√©rer les donn√©es utilisateur');
      console.log(`   Statut: ${refreshResponse.status}`);
      
      if (refreshResponse.status === 404) {
        console.log('   ‚Üí L\'utilisateur n\'existe pas en base');
      } else {
        const errorData = await refreshResponse.json();
        console.log(`   ‚Üí Erreur: ${errorData.error}`);
      }
      return;
    }

    const userData = await refreshResponse.json();
    console.log('‚úÖ Donn√©es utilisateur r√©cup√©r√©es:');
    console.log(`   - Email: ${userData.email}`);
    console.log(`   - Nom: ${userData.name}`);
    console.log(`   - Email v√©rifi√©: ${userData.emailVerified ? '‚úÖ OUI' : '‚ùå NON'}`);
    console.log(`   - Plan: ${userData.subscription?.plan || 'Non d√©fini'}`);
    console.log(`   - Statut: ${userData.subscription?.status || 'Non d√©fini'}`);
    console.log(`   - Audits aujourd'hui: ${userData.usage?.auditsToday || 0}`);
    console.log(`   - Audits total: ${userData.usage?.auditsTotal || 0}`);
    console.log(`   - Dernier audit: ${userData.usage?.lastAuditDate || 'Jamais'}`);

    // 2. V√©rifier si l'email est vraiment v√©rifi√©
    if (!userData.emailVerified) {
      console.log('\n‚ùå PROBL√àME IDENTIFI√â: Email non v√©rifi√© !');
      console.log('   ‚Üí Cela explique pourquoi les audits sont bloqu√©s');
      console.log('   ‚Üí V√©rifiez votre bo√Æte mail et cliquez sur le lien de confirmation');
      return;
    }

    console.log('\n‚úÖ Email v√©rifi√©, on peut tester les audits');

    // 3. Test d'audit avec les vraies donn√©es
    console.log('\n2. üéØ Test d\'audit avec les vraies donn√©es...');
    
    console.log('\n   === Test Audit ===');
    console.log(`   üì§ Donn√©es envoy√©es:`);
    console.log(`      - Email v√©rifi√©: ${userData.emailVerified}`);
    console.log(`      - Plan: ${userData.subscription?.plan}`);
    console.log(`      - Audits aujourd'hui: ${userData.usage?.auditsToday || 0}`);
    
    const auditResponse = await fetch(`${PRODUCTION_URL}/api/analyze`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        url: 'https://example.com',
        engine: 'wave',
        userData: userData
      })
    });

    console.log(`   üì• Statut r√©ponse: ${auditResponse.status}`);

    if (!auditResponse.ok) {
      const errorData = await auditResponse.json();
      console.log(`   ‚ùå Erreur: ${errorData.error}`);
      
      if (errorData.error && errorData.error.includes('Limite d\'audits')) {
        console.log(`   üéØ LIMITATION D√âTECT√âE !`);
        console.log(`   ‚úÖ Le syst√®me fonctionne (limite atteinte)`);
      } else if (errorData.error && errorData.error.includes('email')) {
        console.log(`   üìß Probl√®me de v√©rification email`);
        console.log(`   üîç V√©rification plus approfondie n√©cessaire`);
      } else {
        console.log(`   üõë Autre type d'erreur`);
      }
    } else {
      const result = await auditResponse.json();
      
      console.log(`   ‚úÖ Audit r√©ussi !`);
      console.log(`   üìä R√©sultats:`);
      console.log(`      - Score: ${result.score}`);
      console.log(`      - Violations: ${result.totalViolations}`);
      
      if (result.updatedUserData) {
        console.log(`   üìà Donn√©es mises √† jour:`);
        console.log(`      - Audits aujourd'hui: ${result.updatedUserData.usage?.auditsToday}`);
        console.log(`      - Audits total: ${result.updatedUserData.usage?.auditsTotal}`);
      } else {
        console.log(`   ‚ö†Ô∏è Pas de mise √† jour des donn√©es utilisateur`);
      }
    }

    // 4. V√©rification finale des donn√©es en base
    console.log('\n3. üîÑ V√©rification finale des donn√©es...');
    
    const finalCheckResponse = await fetch(`${PRODUCTION_URL}/api/user/refresh`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email: userEmail })
    });

    if (finalCheckResponse.ok) {
      const finalData = await finalCheckResponse.json();
      console.log('‚úÖ Donn√©es finales en base:');
      console.log(`   - Audits aujourd'hui: ${finalData.usage?.auditsToday || 0}`);
      console.log(`   - Audits total: ${finalData.usage?.auditsTotal || 0}`);
      console.log(`   - Dernier audit: ${finalData.usage?.lastAuditDate || 'Jamais'}`);
      
      // Comparaison
      const initialAudits = userData.usage?.auditsToday || 0;
      const finalAudits = finalData.usage?.auditsToday || 0;
      
      console.log('\nüìä COMPARAISON:');
      console.log(`   Avant: ${initialAudits} audits`);
      console.log(`   Apr√®s: ${finalAudits} audits`);
      
      if (finalAudits > initialAudits) {
        console.log('   ‚úÖ Le compteur s\'est bien incr√©ment√©');
      } else {
        console.log('   ‚ùå Le compteur ne s\'est pas incr√©ment√©');
        console.log('   ‚Üí Probl√®me de synchronisation avec la base');
      }
    }

  } catch (error) {
    console.error('üí• Erreur globale:', error.message);
  }
}

// Ex√©cuter le diagnostic
debugRealUser(); 