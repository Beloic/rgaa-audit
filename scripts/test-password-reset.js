#!/usr/bin/env node

/**
 * Script de test pour la fonctionnalit√© de r√©initialisation de mot de passe
 * Usage: node scripts/test-password-reset.js
 */

import { createClient } from '@supabase/supabase-js';
import crypto from 'crypto';

// Configuration
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || 'https://ntzppsdyidqonusibocc.supabase.co';
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im50enBwc2R5aWRxb251c2lib2NjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTExMDc3NjEsImV4cCI6MjA2NjY4Mzc2MX0.XybM_Rjat5A3EZGHHP_oUNtePrB_krvysqCtuOJtcws';

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkTokens() {
  console.log('üîç V√©rification des tokens de r√©initialisation...\n');

  try {
    // R√©cup√©rer tous les tokens actifs
    const { data: users, error } = await supabase
      .from('users')
      .select('email, password_reset_token, password_reset_expires_at, password_reset_sent_at')
      .not('password_reset_token', 'is', null);

    if (error) {
      console.error('‚ùå Erreur Supabase:', error);
      return;
    }

    if (!users || users.length === 0) {
      console.log('‚ÑπÔ∏è  Aucun token de r√©initialisation actif trouv√©.');
      return;
    }

    console.log(`üìä ${users.length} token(s) de r√©initialisation trouv√©(s):\n`);

    const now = new Date();

    for (const user of users) {
      const expiresAt = new Date(user.password_reset_expires_at);
      const sentAt = new Date(user.password_reset_sent_at);
      const isExpired = expiresAt < now;
      const timeLeft = isExpired ? 0 : Math.round((expiresAt - now) / (1000 * 60)); // minutes

      console.log(`üë§ ${user.email}`);
      console.log(`   üîë Token: ${user.password_reset_token.substring(0, 8)}...`);
      console.log(`   üìÖ Envoy√©: ${sentAt.toLocaleString('fr-FR')}`);
      console.log(`   ‚è∞ Expire: ${expiresAt.toLocaleString('fr-FR')}`);
      console.log(`   üìä Statut: ${isExpired ? '‚ùå EXPIR√â' : `‚úÖ VALIDE (${timeLeft} min restantes)`}`);
      console.log('');
    }

    // Compter les tokens expir√©s
    const expiredCount = users.filter(user => new Date(user.password_reset_expires_at) < now).length;
    
    if (expiredCount > 0) {
      console.log(`‚ö†Ô∏è  ${expiredCount} token(s) expir√©(s) d√©tect√©(s).`);
      console.log('üí° Vous pouvez les nettoyer avec: node scripts/cleanup-tokens.js\n');
    }

  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error);
  }
}

async function testTokenGeneration() {
  console.log('üß™ Test de g√©n√©ration de token...\n');

  // G√©n√©rer un token comme dans l'API
  const token = crypto.randomBytes(32).toString('hex');
  console.log(`üîë Token g√©n√©r√©: ${token}`);
  console.log(`üìè Longueur: ${token.length} caract√®res`);
  console.log(`üî§ Format: hexad√©cimal`);
  console.log('');

  // Test de validation d'expiration
  const expiresAt = new Date();
  expiresAt.setHours(expiresAt.getHours() + 1); // 1 heure

  const isValid = expiresAt > new Date();
  console.log(`‚è∞ Test d'expiration:`);
  console.log(`   Expire le: ${expiresAt.toLocaleString('fr-FR')}`);
  console.log(`   Statut: ${isValid ? '‚úÖ VALIDE' : '‚ùå EXPIR√â'}`);
  console.log('');
}

async function main() {
  console.log('üîê RGAA Audit - Test de r√©initialisation de mot de passe\n');
  console.log('=' .repeat(60));
  console.log('');

  await testTokenGeneration();
  await checkTokens();

  console.log('‚úÖ Tests termin√©s.');
}

// Ex√©cuter le script
main().catch(console.error); 