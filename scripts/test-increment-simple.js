#!/usr/bin/env node

/**
 * Test simple de l'API d'incr√©mentation des audits
 */

const PRODUCTION_URL = 'http://localhost:3008';

async function testIncrementAPI() {
  console.log('üß™ Test simple de l\'API d\'incr√©mentation\n');

  // Donn√©es d'utilisateur de test fictives
  const testUserData = {
    id: 'test-123',
    email: 'test@example.com',
    name: 'Test User',
    emailVerified: true, // Important : email v√©rifi√©
    betaAccess: {
      granted: false,
      hasQuit: false
    },
    subscription: {
      plan: 'free',
      status: 'trial'
    },
    usage: {
      auditsToday: 1,       // D√©j√† 1 audit aujourd'hui
      auditsThisMonth: 5,   // 5 ce mois-ci
      auditsTotal: 20,      // 20 au total
      lastAuditDate: new Date().toISOString(),
      teamMembers: 1,
      storageUsed: 0
    },
    settings: {
      defaultLanguage: 'fr',
      emailNotifications: true,
      weeklyReports: false,
      theme: 'system',
      timezone: 'Europe/Paris'
    }
  };

  try {
    console.log('üìä √âtat initial simul√©:');
    console.log(`   Email: ${testUserData.email}`);
    console.log(`   Email v√©rifi√©: ${testUserData.emailVerified ? 'Oui' : 'Non'}`);
    console.log(`   Plan: ${testUserData.subscription.plan}`);
    console.log(`   Audits aujourd'hui: ${testUserData.usage.auditsToday}`);
    console.log(`   Audits total: ${testUserData.usage.auditsTotal}`);

    // Test de l'API d'incr√©mentation
    console.log('\nüìà Test de l\'API d\'incr√©mentation...');
    
    const incrementResponse = await fetch(`${PRODUCTION_URL}/api/user/increment-audit`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ userData: testUserData })
    });

    console.log(`   Statut: ${incrementResponse.status}`);

    if (incrementResponse.ok) {
      const result = await incrementResponse.json();
      console.log('‚úÖ API d\'incr√©mentation r√©pond correctement');
      
      if (result.success && result.updatedUserData) {
        const updated = result.updatedUserData;
        console.log('\nüìä Donn√©es apr√®s incr√©mentation:');
        console.log(`   Audits aujourd'hui: ${updated.usage?.auditsToday} (√©tait ${testUserData.usage.auditsToday})`);
        console.log(`   Audits total: ${updated.usage?.auditsTotal} (√©tait ${testUserData.usage.auditsTotal})`);
        console.log(`   Audits ce mois: ${updated.usage?.auditsThisMonth} (√©tait ${testUserData.usage.auditsThisMonth})`);
        console.log(`   Dernier audit: ${updated.usage?.lastAuditDate}`);
        
        // V√©rifications
        const expectedAuditsToday = testUserData.usage.auditsToday + 1;
        const expectedAuditsTotal = testUserData.usage.auditsTotal + 1;
        const expectedAuditsThisMonth = testUserData.usage.auditsThisMonth + 1;
        
        console.log('\nüéØ V√âRIFICATIONS:');
        
        if (updated.usage?.auditsToday === expectedAuditsToday) {
          console.log('‚úÖ auditsToday incr√©ment√© correctement');
        } else {
          console.log(`‚ùå auditsToday: attendu ${expectedAuditsToday}, obtenu ${updated.usage?.auditsToday}`);
        }
        
        if (updated.usage?.auditsTotal === expectedAuditsTotal) {
          console.log('‚úÖ auditsTotal incr√©ment√© correctement');
        } else {
          console.log(`‚ùå auditsTotal: attendu ${expectedAuditsTotal}, obtenu ${updated.usage?.auditsTotal}`);
        }
        
        if (updated.usage?.auditsThisMonth === expectedAuditsThisMonth) {
          console.log('‚úÖ auditsThisMonth incr√©ment√© correctement');
        } else {
          console.log(`‚ùå auditsThisMonth: attendu ${expectedAuditsThisMonth}, obtenu ${updated.usage?.auditsThisMonth}`);
        }

        // Test de la limite quotidienne
        console.log('\nüö¶ Test de la limite quotidienne (2 audits max)...');
        
        // Simuler 2 audits suppl√©mentaires pour atteindre la limite
        for (let i = 1; i <= 2; i++) {
          console.log(`\n   Test ${i + 1}/3...`);
          
          const testData = {
            ...testUserData,
            usage: {
              ...testUserData.usage,
              auditsToday: testUserData.usage.auditsToday + i,
              auditsTotal: testUserData.usage.auditsTotal + i,
              auditsThisMonth: testUserData.usage.auditsThisMonth + i
            }
          };
          
          const limitTestResponse = await fetch(`${PRODUCTION_URL}/api/user/increment-audit`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ userData: testData })
          });
          
          if (limitTestResponse.ok) {
            const limitResult = await limitTestResponse.json();
            console.log(`   ‚úÖ Audit ${testData.usage.auditsToday + 1} autoris√©`);
          } else {
            console.log(`   ‚ùå Audit ${testData.usage.auditsToday + 1} refus√©`);
          }
        }

        // Test au-del√† de la limite
        console.log('\n   Test d√©passement de limite (4e audit)...');
        const limitExceededData = {
          ...testUserData,
          usage: {
            ...testUserData.usage,
            auditsToday: 2, // D√©j√† 2 audits aujourd'hui
            auditsTotal: testUserData.usage.auditsTotal + 3,
            auditsThisMonth: testUserData.usage.auditsThisMonth + 3
          }
        };
        
        const limitExceededResponse = await fetch(`${PRODUCTION_URL}/api/user/increment-audit`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ userData: limitExceededData })
        });
        
        if (limitExceededResponse.ok) {
          console.log('   ‚ùå PROBL√àME: 3e audit autoris√© (ne devrait pas)');
        } else {
          console.log('   ‚úÖ 3e audit refus√© correctement');
          const errorText = await limitExceededResponse.text();
          console.log(`   Raison: ${errorText}`);
        }

        console.log('\nüéâ R√âSULTAT: L\'API d\'incr√©mentation fonctionne !');
        
      } else {
        console.log('‚ùå R√©ponse API incompl√®te:', result);
      }
      
    } else {
      const errorText = await incrementResponse.text();
      console.log(`‚ùå Erreur API: ${errorText}`);
    }

  } catch (error) {
    console.error('üí• Erreur:', error.message);
  }
}

testIncrementAPI(); 